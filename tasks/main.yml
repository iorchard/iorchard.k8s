---
- name: include default variables
  ansible.builtin.include_vars: "../vars/main.yml"

- name: include os specific variables
  ansible.builtin.include_vars: "{{ lookup('first_found', _params) }}"
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "../vars"

- name: include os specific tasks
  ansible.builtin.include_tasks: "{{ lookup('first_found', _params) }}"
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "."

- name: Template kubeadm configuration file (kubeadm.conf)
  template:
    dest: "{{ item.dest }}"
    src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  loop:
    - { dest: "/etc/kubernetes/kubeadm.conf" }
  become: yes
  notify:
    - k8s | systemctl daemon-reload
    - k8s | systemctl restart kubelet.service

- name: Force all notified handlers to run now
  ansible.builtin.meta: flush_handlers

#- name: kubeadm init
#  environment:
#    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
#  shell: |
#    set -euo pipefail
#    kubeadm init \
#      --skip-phases=addon/kube-proxy \
#      --upload-certs \
#      --config=/etc/kubernetes/kubeadm.conf
#  args:
#    executable: "/bin/bash"
#  when: inventory_hostname == ansible_play_hosts[0]
#  register: result
#  until: result is succeeded
#  changed_when: result is not succeeded
#  ignore_errors: true
...
